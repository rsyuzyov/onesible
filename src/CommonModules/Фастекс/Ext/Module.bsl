// Пример обращения к сервису:
// ПараметрыЗапроса = Новый Структура("code, format", "all", "json");
// ДополнительныеПараметры = Новый Структура("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
// Таблица = КоннекторHTTP.PostJson("http://Администратор:1541@srv-rozn-sql:5080/retail/hs/fastex/ver", ПараметрыЗапроса, ДополнительныеПараметры);

#Область Обмен

Процедура ВыполнитьОбмен(Знач ПланОбмена, Знач Отправитель, Знач Получатель) Экспорт

	ДатаНачала = ТекущаяДата();
	ПланОбмена = ПланОбмена.ПолучитьОбъект();
	Отправитель = Отправитель.ПолучитьОбъект();
	Получатель = Получатель.ПолучитьОбъект();
	
	СчетчикОшибок = 0;
	
	Попытка
		Отправитель.ОбновитьДанные();
		ЗаписьСтатистикиСоединений(Отправитель, 0);
		
	Исключение
		ЗаписатьОшибкуОбмена(Отправитель.Ссылка, "Опрос узла", ОписаниеОшибки(), СчетчикОшибок);
		ЗафиксироватьВремяОбмена(ПланОбмена, Отправитель, Получатель, СчетчикОшибок, ДатаНачала, Ложь);
		ЗаписьСтатистикиСоединений(Отправитель, 1);
		Возврат;
		
	КонецПопытки;
	
	Попытка
		Получатель.ОбновитьДанные();
		ЗаписьСтатистикиСоединений(Отправитель, 0);
		
	Исключение
		ЗаписатьОшибкуОбмена(Получатель.Ссылка, "Опрос узла", ОписаниеОшибки(), СчетчикОшибок);
		ЗафиксироватьВремяОбмена(ПланОбмена, Отправитель, Получатель, СчетчикОшибок, ДатаНачала, Ложь);
		ЗаписьСтатистикиСоединений(Получатель, 1);
		Возврат;
		
	КонецПопытки;
	
	Попытка
		Результат = Фастекс.ДлинаОчереди(ПланОбмена, Отправитель, Получатель);
		СоставОчереди = СервисHTTP.МассивСтруктурВТаблицуЗначений(Результат.КоличествоПоТипам);
		
	Исключение
		ЗаписатьОшибкуОбмена(Получатель.Ссылка, "Получение состава очереди", ОписаниеОшибки() + "; " + Результат, СчетчикОшибок);
		ЗаписьСтатистикиСоединений(Получатель, 1);
		Возврат;
		
	КонецПопытки;
	
	Для каждого СтрокаОчереди Из СоставОчереди Цикл
		ВыполнитьОбменПоВидуОбъектов(ПланОбмена, Отправитель, Получатель, СтрокаОчереди.Тип, СчетчикОшибок);
	КонецЦикла;
	
	ЗафиксироватьВремяОбмена(ПланОбмена, Отправитель, Получатель, СчетчикОшибок, ДатаНачала, Истина);
		
КонецПроцедуры

Процедура ВыполнитьОбменПоВидуОбъектов(ПланОбмена, Отправитель, Получатель, ИмяТипа, СчетчикОшибок = 0, РазмерПорции = 100) Экспорт
	
	// TODO: реализовать обмен константами
	Если СтрНачинаетсяС(ИмяТипа, "Константа") Тогда
		Возврат; 
	КонецЕсли;
	
	Попытка
		
		Правила = Справочники.ПравилаКонвертации.ПолучитьПравила(ПланОбмена, Отправитель.Версия, Получатель.Версия);
		стр = Правила.Найти(НормализоватьИмяТипа(ИмяТипа));
		Если НЕ стр = Неопределено И стр.ОбменЗапрещен Тогда
			Возврат;
		КонецЕсли;
		
		ВремяНачала = ТекущаяДата();
		
		//Повторяем цикл, пока есть хотя бы один загруженный объект
		Пока Истина Цикл
			УзелДляЛога = ?(Отправитель.Ссылка = ПланОбмена.ГлавныйУзел, Получатель, Отправитель);
			ЗаписьЛогаОбменаПоТипу(ПланОбмена.Ссылка, УзелДляЛога.Ссылка, ИмяТипа);
			
			Результат = ПолучитьИзменения(ПланОбмена, Отправитель, Получатель, ИмяТипа, РазмерПорции);
			Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
				ЗаписатьОшибкуОбмена(Отправитель, "Отправка", "1. " +ИмяТипа + ": " + Результат, СчетчикОшибок);
				ЗаписьДлительностиОбмена(Отправитель, "Отправка", ИмяТипа, 0, 0, ВремяНачала);
				ЗаписьСтатистикиСоединений(Отправитель, 1);
				ВызватьИсключение Результат;
			ИначеЕсли Результат.Количество = 0 Тогда
				ЗаписьСтатистикиСоединений(Отправитель, 0);
				Возврат;
			КонецЕсли;
			
			Если Результат.Свойство("Сжатие") И Результат.Сжатие Тогда
				ДанныеСтрокой = Десериализовать(Результат.Данные).Получить();
			Иначе
				ДанныеСтрокой = Результат.Данные;
			КонецЕсли;
			
			Результат = ОтправитьИзменения(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой);
			Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
				ЗаписьСтатистикиСоединений(Получатель, 0);
				Если НЕ Результат.Получить("ОшибкиЗагрузки") = Неопределено Тогда
					ОшибкиЗагрузки = Результат.Получить("ОшибкиЗагрузки");
					Для каждого Ошибка Из ОшибкиЗагрузки Цикл
						ЗаписатьОшибкуОбмена(Получатель, "Получение",  "" + Отправитель.Код + ": " + ИмяТипа + ": " + Ошибка, СчетчикОшибок);
						Сообщить("" + Получатель.Код + ", " + ИмяТипа + ": " + Ошибка);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Результат.Получить("ЗагруженныеОбъекты") = Неопределено Тогда
					ЗагруженныеОбъекты = Результат.Получить("ЗагруженныеОбъекты");
					Если ЗагруженныеОбъекты.Количество() > 0 Тогда
						Результат = УдалитьИзОчереди(ПланОбмена, Отправитель, Получатель, Сериализовать(ЗагруженныеОбъекты));
						Если НЕ Результат = "ok" Тогда
							ЗаписатьОшибкуОбмена(Получатель, "Очистка очереди",  "" + Отправитель.Код + ": " + ИмяТипа + ": " + Результат, СчетчикОшибок);
							Сообщить("" + Получатель.Код + ", " + ИмяТипа + ": " + Результат);
							Прервать;
						КонецЕсли;
						ЗаписьДлительностиОбмена(Отправитель, "Очитка очереди", ИмяТипа, ЗагруженныеОбъекты.Количество() + ОшибкиЗагрузки.Количество(), ОшибкиЗагрузки.Количество(), ВремяНачала);
						
						//Страховка от зацикливания - на Газеты Звезда были битые записи в регистре событий чеков - 1 запись не удалялась, при этом ошибки не возникало
						Если ЗагруженныеОбъекты.Количество() < РазмерПорции Тогда
							Прервать;
						КонецЕсли;
						
					Иначе
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ЗаписатьОшибкуОбмена(Получатель, "Получение", "3. " + ИмяТипа + ": " + Результат, СчетчикОшибок);
				ЗаписьСтатистикиСоединений(Получатель, 1);
				Сообщить("" + Получатель.Код + ", " + ИмяТипа + ": " + Результат);
				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписатьОшибкуОбмена(Получатель, "Получение", ИмяТипа + ": " + ОписаниеОшибки, СчетчикОшибок);
		Сообщить("" + Отправитель.Код + " -> " + Получатель.Код + ": " + ОписаниеОшибки);
	
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьИзменения(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой) Экспорт

	ПодготовитьДанныеДляЗагрузки(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой);
	ПараметрыЗапроса = Новый Структура("plan, node, version, data", ПланОбмена.ИмяПланаОбмена, Отправитель.Код, Отправитель.Версия, ДанныеСтрокой);
	Результат = КоннекторHTTP.PostJson(Получатель.Адрес() + "data/write", ПараметрыЗапроса);

	Возврат Результат;
	
КонецФункции

Функция ПолучитьОбъект(Знач Отправитель, Знач ИмяТипа, СсылкаСтрокой = "", Код = "", Наименование = "", Номер = "", Дата = "", ВМассиве = Истина) Экспорт

	ИмяТипа = РусифицироватьИмяТипа(ИмяТипа);
	
	ПараметрыЗапроса = Новый Структура("type, inarray", ИмяТипа, Формат(ВМассиве, "БЛ=false; БИ=true"));
	ПараметрыЗапроса.Вставить("ref", СсылкаСтрокой);
	ПараметрыЗапроса.Вставить("code", Код);
	ПараметрыЗапроса.Вставить("name", Наименование);
	ПараметрыЗапроса.Вставить("number", Номер);
	ПараметрыЗапроса.Вставить("date", Дата);
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "data/readobject", ПараметрыЗапроса);

	Возврат Результат;
	
КонецФункции

Функция ПолучитьОбъекты(Знач Отправитель, ДанныеСтрокой) Экспорт

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("data", ДанныеСтрокой);
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "data/readobjects", ПараметрыЗапроса);

	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Очередь

Функция ДлинаОчереди(ПланОбмена, Отправитель, Получатель, Детализировать = Истина) Экспорт

	ПараметрыЗапроса = Новый Структура("plan, node, detailed", ПланОбмена.ИмяПланаОбмена, Получатель.Код, Формат(Детализировать, "БЛ=false; БИ=true"));
	ДополнительныеПараметры = Новый Структура("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "queue/count", ПараметрыЗапроса, ДополнительныеПараметры);

	Возврат Результат;
	
КонецФункции

Функция СоставОчереди(Знач ПланОбмена, Узел = Неопределено, ОбновитьПринудиельно = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПланОбмена) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если НЕ ОбновитьПринудиельно Тогда
		Результат = ПланОбмена.Состав.Получить();
		Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("plan", ПланОбмена.ИмяПланаОбмена);
	ДополнительныеПараметры = Новый Структура("Таймаут", 3);
	Адрес = ?(Узел = Неопределено, ПланОбмена.ГлавныйУзел.ПолучитьОбъект().Адрес(), Узел.ПолучитьОбъект().Адрес());
	Попытка
		Результат = КоннекторHTTP.PostJson(Адрес + "queue/types", ПараметрыЗапроса, ДополнительныеПараметры);
	Исключение
		Сообщить("Не удалось подключиться к узлу для получения состава плана обмена");
	КонецПопытки;
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		об = ПланОбмена.ПолучитьОбъект();
		об.Состав = Новый ХранилищеЗначения(Результат);
		об.Записать();
		
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзменения(ПланОбмена, Отправитель, Получатель, Тип = Неопределено, РазмерПорции = 0, Сжатие = Истина) Экспорт

	ДополнительныеПараметры = Новый Структура("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
	ПараметрыЗапроса = Новый Структура("plan, node, type, compression", ПланОбмена.ИмяПланаОбмена, Получатель.Код, Тип, ?(Сжатие, "true", "false"));
	Если ЗначениеЗаполнено(РазмерПорции) Тогда
		ПараметрыЗапроса.Вставить("count", XMLСтрока(РазмерПорции));
	КонецЕсли;
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "queue/read", ПараметрыЗапроса, ДополнительныеПараметры);
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьИзОчереди(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой) Экспорт

	ПараметрыЗапроса = Новый Структура("plan, node, data", ПланОбмена.ИмяПланаОбмена, Получатель.Код, ДанныеСтрокой);
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "queue/delete", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВОчередь(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой) Экспорт

	ПараметрыЗапроса = Новый Структура("plan, node, data", ПланОбмена.ИмяПланаОбмена, Получатель.Код, ДанныеСтрокой);
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "queue/add", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СписокУзлов(ПланОбмена) Экспорт

	ПараметрыЗапроса = Новый Структура("code, plan, format", "all", ПланОбмена.ИмяПланаОбмена, "json");
	ДополнительныеПараметры = Новый Структура("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
	Результат = КоннекторHTTP.PostJson("http://Администратор:1541@srv-rozn-sql:5080/retail/hs/fastex/nodes", ПараметрыЗапроса, ДополнительныеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Конвертация

Процедура ПодготовитьДанныеДляЗагрузки(ПланОбмена, Отправитель, Получатель, ДанныеСтрокой, КоличествоЭлементов = -1) Экспорт

	Если Получатель.Версия = Отправитель.Версия Тогда
		Возврат;
	КонецЕсли;
	
	Правила = Справочники.ПравилаКонвертации.ПолучитьПравила(ПланОбмена, Отправитель.Версия, Получатель.Версия);
	
	Массив = Десериализовать(ДанныеСтрокой);
	х = 0;
	Пока х < Массив.Количество() Цикл
		ЭлементДанных = Массив[х];
		Чтение = Новый ЧтениеXML;
		Если ТипЗнч(ЭлементДанных)= Тип("ДвоичныеДанные") Тогда
			Чтение.ОткрытьПоток(ЭлементДанных.ОткрытьПотокДляЧтения());
		Иначе
			Чтение.УстановитьСтроку(ЭлементДанных);
		КонецЕсли;
		Построитель = Новый ПостроительDOM;
		ДокументОбъектаDOM = Построитель.Прочитать(Чтение);
		ТекущийОбъектDOM = ДокументОбъектаDOM.ЭлементДокумента;
		
		стр = Правила.Найти(ТекущийОбъектDOM.ИмяУзла);
		Если стр = Неопределено Тогда
			х = х + 1;
			Продолжить;
		КонецЕсли;
		
		Отказ = Ложь;
		Выполнить(стр.Код);
		Если Отказ = Истина Тогда
			Массив.Удалить(х);
			Продолжить;
		КонецЕсли;
		
		ЗаписьDOM = Новый ЗаписьDOM;
		Запись = Новый ЗаписьXML;
		Если ТипЗнч(ЭлементДанных)= Тип("ДвоичныеДанные") Тогда
			Поток = Новый ПотокВПамяти;
			Запись.ОткрытьПоток(Поток);
			ЗаписьDOM.Записать(ДокументОбъектаDOM, Запись);
			Запись.Закрыть();
			Массив[х] = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		Иначе
			Запись.УстановитьСтроку();
			ЗаписьDOM.Записать(ДокументОбъектаDOM, Запись);
			Массив[х] = Сред(Запись.Закрыть(), 23);
		КонецЕсли;
		
		х = х + 1;
		
	КонецЦикла;
	
	КоличествоЭлементов = 0;
	Пока КоличествоЭлементов < Массив.Количество() Цикл
		Если ПустаяСтрока(Массив[КоличествоЭлементов]) Тогда
			Массив.Удалить(КоличествоЭлементов);
		Иначе
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСтрокой = Сериализовать(Массив);
	
КонецПроцедуры

Функция ПолучитьПрефикс(ТекущийЭлементDOM)

	Префикс = "";
	
	Если ТекущийЭлементDOM.ИмяУзла = "Value" Тогда
		ЭлементОбъектаDOM = ТекущийЭлементDOM;
	Иначе
		ЭлементОбъектаDOM = ТекущийЭлементDOM.РодительскийУзел;
	КонецЕсли;
	
	Если ЭлементОбъектаDOM.ИмяУзла = "Value" Тогда
		Для каждого Атрибут Из ЭлементОбъектаDOM.Атрибуты Цикл
			Если Атрибут.Префикс = "xmlns" Тогда
				Префикс = Атрибут.ЛокальноеИмя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Префикс;

КонецФункции

Функция ДобавитьЭлементDOM(ДокументDOM, ТекущийЭлементDOM, Имя, Значение = Неопределено)

	Префикс = ПолучитьПрефикс(ТекущийЭлементDOM);
	
	ЭлементDOM = ДокументDOM.СоздатьЭлемент(?(Префикс = "", "", Префикс + ":") + Имя);
	Если НЕ Значение = Неопределено Тогда
		ЭлементDOM.ТекстовоеСодержимое = Значение;
	КонецЕсли;
	Возврат ТекущийЭлементDOM.ДобавитьДочерний(ЭлементDOM);
	
КонецФункции

Функция ВставитьЭлементDOM(ДокументDOM, ТекущийЭлементDOM, Имя, ИмяПеред, Значение = Неопределено)

	Префикс = ПолучитьПрефикс(ТекущийЭлементDOM);
	
	Элемент = ДокументDOM.СоздатьЭлемент(?(Префикс = "", "", Префикс + ":") + Имя);
	Если НЕ Значение = Неопределено Тогда
		Элемент.ТекстовоеСодержимое = Значение;
	КонецЕсли;
	
	Список = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", ИмяПеред);
	Если Список.Количество() = 0 Тогда
		ДобавитьЭлементDOM(ДокументDOM, ТекущийЭлементDOM, Имя, Значение);
		
	Иначе
		Для каждого Узел Из Список Цикл
			ТекущийЭлементDOM.ВставитьПеред(Элемент, Узел);
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Процедура ПереместитьЭлементDOM(ДокументDOM, ТекущийЭлементDOM, Имя, ИмяПеред = Неопределено)

	Если ИмяПеред = Неопределено Тогда
		Список = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", Имя);
		Для каждого Узел Из Список Цикл
			НовыйУзел = ДобавитьЭлементDOM(ДокументDOM, ТекущийЭлементDOM, Имя);
			ТекущийЭлементDOM.ЗаменитьДочерний(Узел, НовыйУзел);
			Прервать;
		КонецЦикла;
		
	Иначе
		Список = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", Имя);
		Для каждого Узел Из Список Цикл
			СписокПеред = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", ИмяПеред);
			Для каждого УзелПеред Из СписокПеред Цикл
				ТекущийЭлементDOM.ВставитьПеред(Узел, УзелПеред);
				Прервать;
			КонецЦикла;
			Прервать;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЭлементDOM(ТекущийЭлементDOM, Имя)

	ЭлементыDOM = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", Имя);
	Для каждого ЭлементDOM Из ЭлементыDOM Цикл
		ТекущийЭлементDOM.УдалитьДочерний(ЭлементDOM);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭлементDOM(ТекущийЭлементDOM, Имя)

	ЭлементыDOM = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*", Имя);
	Для каждого ЭлементDOM Из ЭлементыDOM Цикл
		Возврат ЭлементDOM;
	КонецЦикла;
	
КонецФункции

Функция ЭтоОбъектУказанногоТипа(ТекущийОбъект, ИмяТипа)

	Если ТекущийОбъект.ИмяУзла = ИмяТипа Тогда
		Возврат Истина;
		
	ИначеЕсли НЕ ТекущийОбъект.Атрибуты = Неопределено Тогда
		Для каждого Атрибут Из ТекущийОбъект.Атрибуты Цикл
			Если Атрибут.ИмяУзла = "xsi:type" И СтрНайти(Атрибут.Значение, ИмяТипа) > 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти


#Область Сериализация

Функция Десериализовать(Представление, Знач Формат = "xml") Экспорт
	
	Если ТипЗнч(Представление) = Тип("ДвоичныеДанные") Тогда
		Формат = НРег(Формат);
		Если Формат = "xml" Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьПоток(Представление.ОткрытьПотокДляЧтения());
			Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
			
		ИначеЕсли Формат = "json" Тогда
			Чтение = Новый ЧтениеJSON;
			Чтение.ОткрытьПоток(Представление.ОткрытьПотокДляЧтения());
			Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
			
		КонецЕсли;
	
	Иначе
		Формат = НРег(Формат);
		Если Формат = "xml" Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Представление);
			Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
			
		ИначеЕсли Формат = "json" Тогда
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Представление);
			Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
			
		КонецЕсли;
	
	КонецЕсли;

КонецФункции

Функция Сериализовать(Значение, Знач Формат = "xml", Вывод = "Строка") Экспорт

	Формат = НРег(Формат);
	
	Если Вывод = "Строка" Тогда
		Если Формат = "xml" Тогда
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(Запись, Значение);
			
		ИначеЕсли Формат = "json" Тогда
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьJSON(Запись, Значение);
			
		КонецЕсли;
		
		Возврат Запись.Закрыть();
		
	ИначеЕсли Вывод = "Поток" Тогда
		Поток = Новый ПотокВПамяти;
		Если Формат = "xml" Тогда
			Запись = Новый ЗаписьXML;
			Запись.ОткрытьПоток(Поток);
			СериализаторXDTO.ЗаписатьXML(Запись, Значение);
			
		ИначеЕсли Формат = "json" Тогда
			Запись = Новый ЗаписьJSON;
			Запись.ОткрытьПоток(Поток);
			СериализаторXDTO.ЗаписатьJSON(Запись, Значение);
			
		КонецЕсли;
		
		Запись.Закрыть();
		Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	КонецЕсли;

КонецФункции

Функция ДесериализоватьПараметрЗапроса(ЗапросHTTP, ИмяПараметра)

	Представление = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, ИмяПараметра);
	Если Представление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = Десериализовать(Представление);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Сервис

Функция ВыполнитьКод(Знач Узел, Знач Текст, Знач ВходящиеПараметры = Неопределено) Экспорт

	ПараметрыЗапроса = Новый Структура("code", Текст);
	Если НЕ ВходящиеПараметры  = Неопределено Тогда
		ПараметрыЗапроса.Вставить("params", ВходящиеПараметры);
	КонецЕсли;
	Результат = КоннекторHTTP.PostJson(Узел.ПолучитьОбъект().Адрес() + "service/do", ПараметрыЗапроса);
	Попытка
		Результат = Десериализовать(Результат);
	Исключение
		ВызватьИсключение Результат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьРасширение(Знач Узел, Знач ДвоичныеДанныеBase64 = Неопределено, Знач Имя = Неопределено) Экспорт

	Узел = Узел.ПолучитьОбъект();
	
	Если ДвоичныеДанныеBase64 = Неопределено Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные("\\192.168.20.18\public\cfe\retail\fastex.cfe");
		ДвоичныеДанныеBase64 = Base64Строка(ДвоичныеДанные);
	КонецЕсли;
	
	Если Имя = Неопределено Тогда
		Имя = "Fastex";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("data, name", ДвоичныеДанныеBase64, Имя);
	Результат = КоннекторHTTP.PostJson(Узел.Адрес() + "service/update", ПараметрыЗапроса);
	Если СтрНайти(Результат, "ok") = 0 Тогда
		ЗаписатьОшибкуОбмена(Узел.Ссылка, "Обновление расширения " + Имя, Результат);
	КонецЕсли;
	
	Попытка
		ОбновитьДанныеУзла(Узел.Ссылка);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписатьОшибкуОбмена(Узел.Ссылка, "Обновление расширения " + Имя, ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПример(Знач Узел, Знач ИмяТипа) Экспорт

	ИмяТипа = РусифицироватьИмяТипа(ИмяТипа);
	
	ПараметрыЗапроса = Новый Структура("type", ИмяТипа);
	Результат = КоннекторHTTP.PostJson(Узел.Адрес() + "service/example", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДанныеУзла(Знач Узел) Экспорт
	
	Узел = Узел.ПолучитьОбъект();
	Узел.ОбновитьДанные();
	
КонецПроцедуры

Функция ВебАдресУзла(УзелСсылка) Экспорт
	
	Узел = УзелСсылка.ПолучитьОбъект();
	Результат = Узел.Адрес();
	
	Возврат Результат;
	
КонецФункции

Функция РусифицироватьИмяТипа(Знач ИмяТипа)

	ИмяТипа = СтрЗаменить(ИмяТипа, "CatalogObject", "СправочникОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "DocumentObject", "ДокументОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "InformationRegisterRecordSet", "РегистрСведенийНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "AccumulationRegisterRecordSet", "РегистрНакопленияНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "AccuountingRegisterRecordSet", "РегистрБухгалтерииНаборЗаписей");
	
	Возврат ИмяТипа;
	
КонецФункции

Функция НормализоватьИмяТипа(Знач ИмяТипа)

	ИмяТипа = СтрЗаменить(ИмяТипа, "СправочникОбъект", "CatalogObject");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ДокументОбъект", "DocumentObject");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрСведенийНаборЗаписей", "InformationRegisterRecordSet");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрНакопленияНаборЗаписей", "AccumulationRegisterRecordSet");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрБухгалтерииНаборЗаписей", "AccuountingRegisterRecordSet");
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник.", "CatalogObject.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Документ.", "DocumentObject.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрСведений.", "InformationRegisterRecordSet.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрНакопления.", "AccumulationRegisterRecordSet.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрБухгалтерии.", "AccuountingRegisterRecordSet.");
	
	Возврат ИмяТипа;
	
КонецФункции

#КонецОбласти


#Область Логи

Процедура ЗафиксироватьВремяОбмена(ПланОбмена, Отправитель, Получатель, СчетчикОшибок, ДатаНачала, УспешноеЗавершение)

	Менеджер = РегистрыСведений.УзлыОбмена.СоздатьМенеджерЗаписи();
	Менеджер.ПланОбмена = ПланОбмена.Ссылка;
	Если ПланОбмена.ГлавныйУзел = Отправитель.Ссылка Тогда
		Менеджер.Узел = Получатель.Ссылка;
		Менеджер.Прочитать();
		Менеджер.ДатаЗагрузки = ТекущаяДата();
		Если УспешноеЗавершение Тогда
			Менеджер.ДатаУспешнойЗагрузки = Менеджер.ДатаЗагрузки;
		КонецЕсли;
		Менеджер.КоличествоОшибокЗагрузки = СчетчикОшибок;
		Менеджер.Записать();
	Иначе
		Менеджер.Узел = Отправитель.Ссылка;
		Менеджер.Прочитать();
		Менеджер.ДатаВыгрузки = ТекущаяДата();
		Если УспешноеЗавершение Тогда
			Менеджер.ДатаУспешнойВыгрузки = Менеджер.ДатаВыгрузки;
		КонецЕсли;
		Менеджер.КоличествоОшибокВыгрузки = СчетчикОшибок;
		Менеджер.Записать();
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура("plan, node, action, startdate, result", ПланОбмена.ИмяПланаОбмена, Получатель.Код, "ВыгрузкаДанных", ДатаНачала, "Выполнено");
	Результат = КоннекторHTTP.PostJson(Отправитель.Адрес() + "/node/setlastsync", ПараметрыЗапроса);
	Если НЕ Результат = "ok" Тогда
		ЗаписатьОшибкуОбмена(Отправитель.Ссылка, "Запись даты обмена", Результат, СчетчикОшибок);
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("plan, node, action, startdate, result", ПланОбмена.ИмяПланаОбмена, Отправитель.Код, "ЗагрузкаДанных", ДатаНачала, "Выполнено");
	Результат = КоннекторHTTP.PostJson(Получатель.Адрес() + "/node/setlastsync", ПараметрыЗапроса);
	Если НЕ Результат = "ok" Тогда
		ЗаписатьОшибкуОбмена(Получатель.Ссылка, "Запись даты обмена", Результат, СчетчикОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуОбмена(Узел, Событие, ОписаниеОшибки, СчетчикОшибок = 0) Экспорт

	Если СтрНайти(ОписаниеОшибки, "Истекло время ожидания сеанса") > 0 Тогда
		ОписаниеОшибки = "Истекло время ожидания сеанса";
	КонецЕсли;
	СчетчикОшибок = СчетчикОшибок + 1;
	ЗаписьЖурналаРегистрации("Fastex. " + Событие, УровеньЖурналаРегистрации.Ошибка, , Узел.Ссылка, ОписаниеОшибки);
	ЗаписьЛогаОбмена(Узел, "Ошибка", Событие, ОписаниеОшибки);
	
КонецПроцедуры

Процедура ЗаписьЛогаОбмена(Узел, Уровень, Событие, Описание) Экспорт

	Момент = ТекущаяДата();
	Набор = РегистрыСведений.ЛогОбмена.СоздатьНаборЗаписей();
	Набор.Отбор.Узел.Установить(Узел.Ссылка, Истина);
	Набор.Отбор.Дата.Установить(Момент, Истина);
	Набор.Отбор.Событие.Установить(Событие, Истина);
	Набор.Отбор.Уровень.Установить(Уровень, Истина);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.Узел = Узел.Ссылка;
		Запись.Дата = Момент;
		Запись.Событие = Событие;
		Запись.Уровень = Уровень;
		Запись.Описание = Описание;
	Иначе
		Запись = Набор[0];
		Запись.Описание = Запись.Описание + "
		|==========
		|" + Описание;
	КонецЕсли;
	Набор.Записать();
	
	//Теперь удалим две записи старше установленной глубины 
	Глубина = Константы.ДлительностьХраненияЛогаОбмена.Получить();
	Если Глубина = 0 Тогда
		Глубина = 3;
		Константы.ДлительностьХраненияЛогаОбмена.Установить(Глубина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
	               |	ЛогОбмена.Дата КАК Дата
	               |ИЗ
	               |	РегистрСведений.ЛогОбмена КАК ЛогОбмена
	               |ГДЕ
	               |	ЛогОбмена.Дата <= &Дата";
	Запрос.УстановитьПараметр("Дата", Момент - Глубина * 86400);
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.СтатистикаСоединений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Набор.Отбор.Дата.Установить(Выборка.Дата, Истина);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьЛогаОбменаПоТипу(ПланОбмена, Узел, ИмяТипа) Экспорт

	Набор = РегистрыСведений.ОбменыПоТипу.СоздатьНаборЗаписей();
	Набор.Отбор.ПланОбмена.Установить(ПланОбмена, Истина);
	Набор.Отбор.Узел.Установить(Узел, Истина);
	Набор.Отбор.ИмяТипа.Установить(ИмяТипа, Истина);
	Запись = Набор.Добавить();
	Запись.ПланОбмена = ПланОбмена;
	Запись.Узел = Узел;
	Запись.ИмяТипа = ИмяТипа;
	Запись.ДатаВыгрузки = ТекущаяДата();
	Запись.ДатаЗагрузки = ТекущаяДата();
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗаписьДлительностиОбмена(Узел, Событие, ИмяТипа, КоличествоОбъектов, КоличествоОшибок, ВремяНачала) Экспорт

	Длительность  = ТекущаяДата() - ВремяНачала;
	Набор = РегистрыСведений.ДлительностьОбмена.СоздатьНаборЗаписей();
	Набор.Отбор.Узел.Установить(Узел.Ссылка, Истина);
	Набор.Отбор.ИмяТипа.Установить(ИмяТипа, Истина);
	Набор.Отбор.Событие.Установить(Событие, Истина);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.Узел = Узел.Ссылка;
		Запись.ИмяТипа = ИмяТипа;
		Запись.Событие = Событие;
		Запись.Количество = КоличествоОбъектов;
		Запись.КоличествоОшибок = КоличествоОшибок;
		Запись.Длительность = Длительность;
	Иначе
		Запись = Набор[0];
		Запись.Количество = Запись.Количество + КоличествоОбъектов;
		Запись.КоличествоОшибок = Запись.КоличествоОшибок + КоличествоОшибок;
		Запись.Длительность = Запись.Длительность + Запись.Длительность;
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗаписьСтатистикиСоединений(Узел, Отказов) Экспорт

	Дата = ТекущаяДата();
	Набор = РегистрыСведений.СтатистикаСоединений.СоздатьНаборЗаписей();
	Набор.Отбор.Узел.Установить(Узел.Ссылка, Истина);
	Набор.Отбор.Дата.Установить(Дата, Истина);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.Узел = Узел.Ссылка;
		Запись.Дата = Дата;
		Запись.Запросов = 1;
		Запись.Отказов = Отказов;
	Иначе
		Запись = Набор[0];
		Запись.Запросов = Запись.Запросов + 1;
		Запись.Отказов = Запись.Отказов + Отказов;
	КонецЕсли;
	Набор.Записать();
	
	//Теперь удалим две записи старше установленной глубины 
	Глубина = Константы.ДлительностьХраненияСтатистикиСоединенийПриОбмене.Получить();
	Если Глубина = 0 Тогда
		Глубина = 1;
		Константы.ДлительностьХраненияСтатистикиСоединенийПриОбмене.Установить(Глубина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
	               |	СтатистикаСоединений.Дата КАК Дата
	               |ИЗ
	               |	РегистрСведений.СтатистикаСоединений КАК СтатистикаСоединений
	               |ГДЕ
	               |	СтатистикаСоединений.Дата <= &Дата";
	Запрос.УстановитьПараметр("Дата", Дата - Глубина * 60);
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.СтатистикаСоединений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Набор.Отбор.Дата.Установить(Выборка.Дата, Истина);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти