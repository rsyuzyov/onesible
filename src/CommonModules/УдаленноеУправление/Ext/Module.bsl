#Область ВыполнениеСценариев

Функция ВыполнитьEpf(Знач Компьютер, Знач ИмяФайлаСкрипта, Интерактивно = Ложь, ОтИмениСистемы = Ложь) Экспорт 
	
	ИмяФайлаСкриптаНаАгенте = УдаленноеУправление.ИмяФайлаНаАгенте(ИмяФайлаСкрипта);
	Результат = СкопироватьФайл(Компьютер, ИмяФайлаСкрипта, ИмяФайлаСкриптаНаАгенте, Истина);
	Если НЕ Результат.КодВозврата = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КодКоманды = СтрШаблон("%1 /F ""%2"" /N""pult"" /P""2684"" /DisableStartupMessages /Execute ""%3""", ПутьКПлатформе(), КаталогПустойБазы(), ИмяФайлаСкриптаНаАгенте);
	Возврат ВыполнитьКомандуCMD(Компьютер, КодКоманды);
	
КонецФункции

Функция ВыполнитьOneScript(Знач Компьютер, Знач ИмяФайлаСкрипта, Интерактивно = Ложь, ОтИмениСистемы = Ложь) Экспорт 

	ИмяФайлаСкриптаНаАгенте = ИмяФайлаНаАгенте(ИмяФайлаСкрипта);
	СкопироватьФайл(Компьютер, ИмяФайлаСкрипта, ИмяФайлаСкриптаНаАгенте);
	Результат = ВыполнитьКомандуCMD(Компьютер, СтрШаблон("oscript %1", ИмяФайлаСкриптаНаАгенте));
	УдалитьФайл(Компьютер, ИмяФайлаСкриптаНаАгенте);
	Возврат Результат;

КонецФункции

Функция ВыполнитьPowershell(Знач Компьютер, Знач ИмяФайлаСкрипта, Интерактивно = Ложь, ОтИмениСистемы = Ложь) Экспорт 

	Обработчик = ОбщегоНазначенияСервер.ПолучитьРоль("Powershell");
	Возврат Обработчик.ВыполнитьСкрипт(Компьютер, ИмяФайлаСкрипта, Интерактивно, ОтИмениСистемы);

КонецФункции

Функция ВыполнитьCMD(Знач Компьютер, Знач ИмяФайлаСкрипта, Интерактивно = Ложь, ОтИмениСистемы = Ложь, ДождатьсяЗавершения = Истина, ЗакрыватьКонсольПослеВыполнения = Истина) Экспорт 

	Адрес = ОбщегоНазначенияСервер.РеквизитОбъекта(Компьютер, "IP");
	Расширение = ФайловаяСистема.РасширениеФайла(ИмяФайлаСкрипта);
	Если НЕ ДождатьсяЗавершения Тогда
		//Если не дожидаемся окончания выполнения, то необходимо скопировать файл скрипта, иначе он будет удален системой после выхода из процедуры
		НовоеИмя = СтрЗаменить(ИмяФайлаСкрипта, Расширение, "_" + Расширение);
		КопироватьФайл(ИмяФайлаСкрипта, НовоеИмя);
		ИмяФайлаСкрипта = НовоеИмя;
	КонецЕсли;
	ИмяФайлаЛога = СтрЗаменить(ИмяФайлаСкрипта, Расширение, ".log");
	
	УчетныеДанные = УчетныеДанные(Компьютер);
	СтрокаСтартера = СтрШаблон("%1psexec.exe \\%2 -accepteula %3 %4 -h -u %5 -p %6 -c %7"
		, КаталогУтилит(), Адрес, ?(Интерактивно, " -i", ""), ?(ОтИмениСистемы, " -s", "")
		, УчетныеДанные.Логин, УчетныеДанные.Пароль, ИмяФайлаСкрипта);
		
	Если ДождатьсяЗавершения Тогда
		СтрокаСтартера = СтрокаСтартера + " > " + ИмяФайлаЛога;
	Иначе
		//раз делали копию файла, то и чистить нужно за собой самостоятельно
		СтрокаСтартера = СтрокаСтартера + "
		|del " + ИмяФайлаСкрипта;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Если НЕ ЗакрыватьКонсольПослеВыполнения Тогда
			СтрокаСтартера = СтрокаСтартера + "
			|pause";
		КонецЕсли;
	#КонецЕсли
	
	ИмяФайлаСтартера = СоздатьСкрипт(СтрокаСтартера);
	КодВозврата = 0;
	ЗапуститьПриложение(ИмяФайлаСтартера, КаталогВременныхФайлов(), ДождатьсяЗавершения, КодВозврата);
	Если ДождатьсяЗавершения Тогда
		Лог = ПолучитьЛогОперации(ИмяФайлаЛога);
		ФайловаяСистема.УдалитьФайл(ИмяФайлаСкрипта);
		ФайловаяСистема.УдалитьФайл(ИмяФайлаЛога);
		ФайловаяСистема.УдалитьФайл(ИмяФайлаСтартера);
		
	Иначе
		КодВозврата = 0;
		Лог = "Операция запущена без ожидания завершения";
		
	КонецЕсли;
	
	Возврат Результат(КодВозврата, "", Лог);

КонецФункции

Функция ВыполнитьКомандуCMD(Знач Компьютер, Знач Команда, Интерактивно = Ложь, ОтИмениСистемы = Ложь, ДождатьсяЗавершения = Истина, ЗакрыватьКонсольПослеВыполнения = Истина) Экспорт

	ИмяФайлаСкрипта = СоздатьСкрипт(Команда);
	Результат = ВыполнитьCMD(Компьютер, ИмяФайлаСкрипта, Интерактивно, ОтИмениСистемы, ДождатьсяЗавершения, ЗакрыватьКонсольПослеВыполнения);
	ФайловаяСистема.УдалитьФайл(ИмяФайлаСкрипта);
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Проверки

Функция IPCДоступен(Компьютер, ИспользоватьКэш = Истина) Экспорт

	Если ИспользоватьКэш Тогда
		Результат = ОбщегоНазначенияСервер.ПолучитьСвойствоКомпьютера(Компьютер, , "IPC");
		Если Результат.Значение = "1" Тогда
			Возврат Результат(0);
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗапроситьИмяКомпьютера(Компьютер);
	Если Результат.КодВозврата = 0 Тогда
		ОбщегоНазначенияСервер.ЗаписатьСвойствоКомпьютера(Компьютер, , "IPC", 1);
		
	Иначе
		Результат.ОписаниеОшибки = "Нет доступа к ресурсу c$";
		Результат.Лог = Результат.Лог + "
		|Возможное решения - отключение UAC или внесение ключа в реестр:
		|Windows Registry Editor Version 5.00
		|[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
		|""LocalAccountTokenFilterPolicy""=dword:00000001";
		ОбщегоНазначенияСервер.ЗаписатьСвойствоКомпьютера(Компьютер, , "IPC", 0, Результат.Лог);
		Возврат Результат;
		
	КонецЕсли;
	

КонецФункции

#КонецОбласти


#Область ПрикладныеСценарии

Функция ВыполнитьБазовуюНастройку(Компьютер, Принудительно = Ложь) Экспорт

	Если НЕ Принудительно И ОбщегоНазначенияСервер.ПолучитьСвойствоКомпьютера(Компьютер, , "БазоваяНастройкаВыполнена").Значение = "1" Тогда
		Возврат Результат(0);
	КонецЕсли;
	
	Результат = IPCДоступен(Компьютер);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(2, Результат.ОписаниеОшибки, Результат.Лог);
	КонецЕсли;
	
	Результат = ЗапроситьРазрядностьОС(Компьютер);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(2, Результат.ОписаниеОшибки, Результат.Лог);
	КонецЕсли;
	
	Результат = СоздатьСтандартнуюСтруктуруКаталогов(Компьютер);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(2, "Не удалось создать стандартную структуру каталогов", Результат.Лог);
	КонецЕсли;
	
	Результат = СкопироватьСтандартныеФайлы(Компьютер);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(2, "Не удалось скопировать стандартный набор файлов", Результат.Лог);
	КонецЕсли;
	
	Результат = ОтключитьUAC(Компьютер);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(2, "Не удалось отключить UAC", Результат.Лог);
	КонецЕсли;
	
	ОбщегоНазначенияСервер.ЗаписатьСвойствоКомпьтера(Компьютер, , "БазоваяНастройкаВыполнена", 1);
	Возврат Результат(2);
	
КонецФункции

Функция СоздатьСтандартнуюСтруктуруКаталогов(Компьютер) Экспорт

	Тело = СтрШаблон("
	|if not exist \\%1\c$\1c mkdir \\%1\c$\1c
	|if not exist \\%1\c$\1c\ib mkdir \\%1\c$\1c\ib
	|if not exist \\%1\c$\1c\ib\pult mkdir \\%1\c$\1c\ib\pult
	|if not exist \\%1\c$\1c\ib\retail mkdir \\%1\c$\1c\ib\retail
	|if not exist \\%1\c$\1c\dist mkdir \\%1\c$\1c\dist
	|if not exist \\%1\c$\1c\scripts mkdir \\%1\c$\1c\scripts
	|if not exist \\%1\c$\1c\temp mkdir \\%1\c$\1c\temp
	|if not exist \\%1\c$\1c\tools mkdir \\%1\c$\1c\tools
	|", ОбщегоНазначенияСервер.РеквизитОбъекта(Компьютер, "IP"));
	Возврат ВыполнитьКомандуCMD(Компьютер, Тело, Ложь, Истина);

КонецФункции

Функция СкопироватьСтандартныеФайлы(Компьютер) Экспорт

	Результат = СкопироватьФайл(Компьютер, КаталогПустойБазы() + "1cv8.1cd", , Истина);
	Если НЕ Результат.КодВозврата = 0 Тогда
		Возврат Результат(1, "Не удалось скопировать пустую базу", Результат.Лог);
	КонецЕсли;
	
	Результат = СкопироватьФайл(Компьютер, КаталогУтилит() + "aria2c.exe");
	Если НЕ Результат.КодВозврата = 0 Тогда
		Возврат Результат(1, "Не удалось скопировать aria2c.exe", Результат.Лог);
	КонецЕсли;
	
	Результат = СкопироватьФайл(Компьютер, КаталогУтилит() + "7z.exe");
	Если НЕ Результат.КодВозврата = 0 Тогда
		Возврат Результат(1, "Не удалось скопировать z7.exe", Результат.Лог);
	КонецЕсли;
	
	Результат = СкопироватьФайл(Компьютер, КаталогДистрибутивов() + "conf.cfg", , Истина);
	Если НЕ Результат.КодВозврата = 0 Тогда
		Возврат Результат(1, "Не удалось скопировать conf.cfg", Результат.Лог);
	КонецЕсли;
	
	Возврат Результат(0);

КонецФункции

Функция ОтключитьUAC(Компьютер) Экспорт
	
	Возврат ВыполнитьКомандуCMD(Компьютер, "REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f", Истина, Истина);
	
КонецФункции

Функция УстановитьOneScript(Компьютер) Экспорт

	Возврат ВыполнитьКомандуCMD(Компьютер, КаталогУтилит() + "onescript-setup.exe /silent", Истина, Истина);
	
КонецФункции

Функция СкопироватьФайл(Знач Компьютер, Знач Откуда, Знач Куда = Неопределено, Знач Принудительно = Ложь) Экспорт

	Если Куда = Неопределено Тогда
		Куда = Откуда;
	КонецЕсли;
	
	Если Принудительно Тогда
		Тело = "
		|net use \\%1\c$ %5 /USER:%4
		|copy %2 \\%1\%3 /y
		|";
	Иначе
		Тело = "
		|net use \\%1\c$ %5 /USER:%4
		|if not exist \\%1\%3 copy %2 \\%1\%3
		|";
	КонецЕсли;
	
	УчетныеДанные = УчетныеДанные(Компьютер); 
	Адрес = ОбщегоНазначенияСервер.РеквизитОбъекта(Компьютер, "IP");
	ИмяФайлаСкрипта = СоздатьСкрипт(СтрШаблон(Тело, Адрес, Откуда, СтрЗаменить(Куда, "c:", "c$"), УчетныеДанные.Логин, УчетныеДанные.Пароль));
	ИмяФайлаЛога = СтрЗаменить(ИмяФайлаСкрипта, ".cmd", ".log");
	
	ИмяФайлаСтартера = СоздатьСкрипт(ИмяФайлаСкрипта + " > " + ИмяФайлаЛога);
	КодВозврата = 0;
	ЗапуститьПриложение(ИмяФайлаСтартера, , Истина, КодВозврата);
	Лог = ПолучитьЛогОперации(ИмяФайлаЛога);
	
	ФайловаяСистема.УдалитьФайл(ИмяФайлаСтартера);
	ФайловаяСистема.УдалитьФайл(ИмяФайлаСкрипта);
	ФайловаяСистема.УдалитьФайл(ИмяФайлаЛога);
	
	Возврат Результат(КодВозврата, "", Лог);
	
КонецФункции

Функция РаспаковатьФайл(Компьютер, Откуда, Куда) Экспорт

	Результат = УдаленноеУправление.ВыполнитьКомандуCMD(Компьютер, "c:\1c\tools\7z.exe -o%1 %2", Куда, Откуда);
	Если НЕ Результат.КодВозврата = 0  Тогда
		Возврат Результат(Результат.КодВозврата, "Не удалось распаковать файл: " + Результат.ОписаниеОшибки, Результат.Лог);
	КонецЕсли;

КонецФункции

Функция УдалитьФайл(Знач Компьютер, Знач Куда) Экспорт

	Тело = "
	|net use \\%1\c$ %4 /USER:%3
	|if exist \\%1\%2 del \\%1\%2 -y
	|";
	
	УчетныеДанные = УчетныеДанные(Компьютер); 
	Адрес = ОбщегоНазначенияСервер.РеквизитОбъекта(Компьютер, "IP");
	ИмяФайлаСкрипта = СоздатьСкрипт(СтрШаблон(Тело, Адрес, СтрЗаменить(Куда, "c:", "c$"), УчетныеДанные.Логин, УчетныеДанные.Пароль));
	ИмяФайлаЛога = СтрЗаменить(ИмяФайлаСкрипта, ".cmd", ".log");
	
	ИмяФайлаСтартера = СоздатьСкрипт(ИмяФайлаСкрипта + " > " + ИмяФайлаЛога);
	КодВозврата = 0;
	ЗапуститьПриложение(ИмяФайлаСтартера, , Истина, КодВозврата);
	Лог = ПолучитьЛогОперации(ИмяФайлаЛога);
	
	ФайловаяСистема.УдалитьФайл(ИмяФайлаСтартера);
	ФайловаяСистема.УдалитьФайл(ИмяФайлаСкрипта);
	ФайловаяСистема.УдалитьФайл(ИмяФайлаЛога);
	
	Возврат Результат(КодВозврата, "", Лог);
	
КонецФункции

Функция ЗапроситьИмяКомпьютера(Компьютер) Экспорт

	Результат = ВыполнитьКомандуCMD(Компьютер, "echo name:%computername%");
	Результат.Вставить("Наименование", ПолучитьЗначениеИзЛогаОперации(Результат.Лог, "name"));
	
	Если НЕ ПустаяСтрока(Результат.Наименование) И НЕ Компьютер.Наименование = Результат.Наименование Тогда
		об = Компьютер.ПолучитьОбъект();
		об.Наименование = Результат.Наименование;
		об.Записать();
		Возврат Результат(0);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗапроситьРазрядностьОС(Компьютер) Экспорт

	Результат = ВыполнитьКомандуCMD(Компьютер, "If ""%ProgramW6432%"" Neq """" (Echo bitdepth:x64) Else (Echo bitdepth:x86)");
	Результат.Вставить("Разрядность", ПолучитьЗначениеИзЛогаОперации(Результат.Лог, "bitdepth"));
	
	Если НЕ ПустаяСтрока(Результат.Разрядность) И НЕ Компьютер.Разрядность = Результат.Разрядность Тогда
		ОбщегоНазначенияСервер.ЗаписатьСвойствоКомпьтера(Компьютер, , "Разрядность", Результат.Лог); 
		Возврат Результат(0);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СоздатьСкрипт(Команда, Расширение = ".cmd", Знач Кодировка = Неопределено) Экспорт

	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла(Расширение);
	
	Если НЕ Кодировка = Неопределено Тогда
		// оставим как есть
	ИначеЕсли Расширение = ".cmd" Тогда
		Кодировка = КодировкаТекста.OEM;
	Иначе
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Запись = Новый ТекстовыйДокумент;
	Запись.УстановитьТекст(Команда);
	Запись.Записать(ИмяФайлаСкрипта, Кодировка);
	
	//не всегда файл сразу доступен для чтения, нужно немного подождать
	Если НЕ ФайловаяСистема.ФайлПоявился(ИмяФайлаСкрипта) Тогда
		Возврат Результат(1, "Не удалось получить доступ к временному файлу скрипта");
	КонецЕсли;
	
	Возврат ИмяФайлаСкрипта;
	
КонецФункции

#КонецОбласти


#Область РазмещениеФайлов

Функция КаталогДистрибутивов() Экспорт

	Возврат "c:\1c\dist\";

КонецФункции

Функция КаталогОбработок() Экспорт

	Возврат "c:\1c\scripts\";

КонецФункции

Функция КаталогСкриптов() Экспорт

	Возврат "c:\1c\scripts\";

КонецФункции

Функция КаталогПрочихФайлов() Экспорт

	Возврат "c:\1c\temp\";

КонецФункции

Функция КаталогБаз() Экспорт

	Возврат "c:\1c\ib\";

КонецФункции

Функция КаталогУтилит() Экспорт

	Возврат "c:\1c\tools\";

КонецФункции

Функция КаталогПустойБазы() Экспорт

	Возврат "c:\1c\ib\pult\";

КонецФункции

Функция ИмяФайлаНаАгенте(ПолноеИмяФайла) Экспорт

	Каталог = КаталогПрочихФайлов();
	
	РасширениеФайла = ФайловаяСистема.РасширениеФайла(ПолноеИмяФайла);
	Если РасширениеФайла = ".epf" Тогда
		Каталог = КаталогОбработок();
	ИначеЕсли РасширениеФайла = ".ps1" Тогда
		Каталог = КаталогСкриптов();
	ИначеЕсли РасширениеФайла = ".os" Тогда
		Каталог = КаталогСкриптов();
	ИначеЕсли РасширениеФайла = ".cmd" Тогда
		Каталог = КаталогСкриптов();
	ИначеЕсли РасширениеФайла = ".exe" Тогда
		Каталог = КаталогУтилит();
	ИначеЕсли РасширениеФайла = ".1cd" Тогда
		Каталог = КаталогБаз();
	КонецЕсли;
	
	Возврат Каталог + ФайловаяСистема.ИмяФайла(ПолноеИмяФайла);

КонецФункции

#КонецОбласти


#Область ВспомогательныеМетоды

Функция УчетныеДанные(Компьютер) Экспорт

	Возврат Новый Структура("Логин, Пароль", "user", "97315")
	
КонецФункции

Функция ПолучитьЛогОперации(ИмяФайлаЛога)

	Если ФайловаяСистема.ФайлПоявился(ИмяФайлаЛога) Тогда
		Чтение = Новый ЧтениеТекста(ИмяФайлаЛога, КодировкаТекста.OEM);
		Лог = Чтение.Прочитать();
		Чтение.Закрыть();
		Лог = ?(Лог = Неопределено, "", Лог);
	Иначе
		Лог = "Не найден файл лога выполнения операции";
	КонецЕсли;
	
	Возврат Лог;
	
КонецФункции

// Находит значение параметра в логе: ищем строку по шаблону "echo Параметр:" и возвращаем следующую строку
// Параметры:
//	Лог - Строка - данные лога
//	Параметр - Строка - имя параметра для поиска опорной строки
//	Смещение - Число - смщение номера возвращаемой строки, от номера найденной строки
Функция ПолучитьЗначениеИзЛогаОперации(Знач Лог, Знач Параметр, Знач Смещение = 1) Экспорт

	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Лог);
	х = Тексты.НайтиВТексте(Текст, "echo " + Параметр + ":");
	Если х > 0 Тогда
		Строка = Текст.ПолучитьСтроку(х + Смещение);
		Возврат СокрЛП(СтрЗаменить(Строка, Параметр + ":", ""));
	КонецЕсли;
	
	Возврат "";

КонецФункции

Функция ПутьКПлатформе() Экспорт

	Возврат """C:\Program Files (x86)\1Cv8\common\1cestart.exe""";

КонецФункции

// Подготавливает стандартный ответ для функции
//Параметры
//	КодВозврата - Число - 0 - ОК, 1 - есть предупреждения, возможно продолжение выполнения, 2 - есть ошибки, продолжение выполнения невозможно
//	ОписаниеОшибки - Строка - Объяснение сусти проблемы, когда КодВозврата <> 0
//	Лог - Строка - Лог выполнения операции, например стандартный вывод, полученный  при выполнении метода УдаленноеУправление.ВыполнитьКомандуCMD
&НаКлиенте
Функция Результат(КодВозврата, ОписаниеОшибки = "", Лог = "") Экспорт

	Возврат Новый Структура("КодВозврата, ОписаниеОшибки, Лог", КодВозврата, ОписаниеОшибки, Лог);

КонецФункции // ()

&НаКлиенте
Процедура Пауза(ВремяОжидания) Экспорт
	
	Если ВремяОжидания <> 0 Тогда
		
		НастройкиПрокси = Новый ИнтернетПрокси(Ложь);
		НастройкиПрокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
		НастройкиПрокси.НеИспользоватьПроксиДляАдресов.Добавить("127.0.0.0");
		
		Попытка
			Loopback = Новый HTTPСоединение(
				"127.0.0.0",,,,НастройкиПрокси,
				ВремяОжидания);
			Loopback.Получить(Новый HTTPЗапрос());
		Исключение
			ВремяОжидания = 0;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
